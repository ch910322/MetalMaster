remote inner procedure PrintEBSDocument(string,string,record RcVc,string,string,var area);
remote inner function Boolean ExternalDocumentEnabled(string);

global
procedure OuterGetExternalDocType(string docname,var string type)
begin

  switch (docname) begin
    case "CEMarkForm": type = "CEMark";
    case "DeclarationOfPerformance": type = "DeclOfPerf";
    case "ProdOrderForm": type = "ProdOrder";
    
  end;

  return;
end;

global
function Integer OuterShowExternalDocFilters(string docname,string type,real tv)
begin
  Integer cnt;
  real vs,h,v;
  h = 120; vs = 20;
  
  SetLangMode(LangLatvian,"LAT",2);
  v = tv;
  switch (type) begin
    case "DeclOfPerf":
      ButtonFrame(h,v+=50,280,1,"Filtrēšana");
      
      EditFieldTL(h+70,v,150,"Deklarācija",M4Set,Normal,30100,IntVal1,false,SetSClass);
      v = v + 20;
  end;

  OuterShowExternalDocFilters = v;
end;

function Boolean MM_DeclarationClassDClassItemGroupEFAfter(Integer wn,Boolean changedf)
begin
  Boolean res;
  record MM_DeclarationClassVc DCr;
  record ITVc ITr;

  res = true;
  if (changedf) then begin
    GetWindowRecord(wn,DCr);
    ITr.Code = DCr.ItemGroup;
    if (ReadFirstMain(ITr,1,true)) then begin
      DCr.Description = ITr.Comment;
    end;
    PutWindowRecord(wn,DCr);
  end;
  MM_DeclarationClassDClassItemGroupEFAfter = res;
  return;
end;

global
function Boolean MM_DeclarationClassDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "ItemGroup": res = MM_DeclarationClassDClassItemGroupEFAfter(wn,changed!=0);
  end;
  MM_DeclarationClassDClassAfterEditField = res;
  return;
end;


global
procedure PrintCEMark()
begin
  record RcVc RepSpec;
  string 255 fname;
  area farea;
  Integer wn;
  record ORVc ORr;
  row ORVc ORrw;
  record INVc INr;
  integer i,rwcnt;
  vector boolean vgroups;
  array string 20 agroups;
  string 200 newfilename;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    if (ExternalDocumentEnabled("CEMarkForm")) then begin
      GetWindowRecord(wn,ORr);
      fname = SaveFileDialog("","","pdf");
      if (nonblank(fname)) then begin
        rwcnt = matrowcnt(ORr);
        for(i=0;i<rwcnt;i=i+1)begin
          matrowget(ORr,i,ORrw);
          if(ORrw.stp==1 and nonblank(ORrw.ArtCode) and ORrw.ShowCEMark==1)then begin
            INr.Code = ORrw.ArtCode;
            if(readfirstmain(INr,1,true))then begin
              vgroups[INr.Group] = true;
            end;
          end;
        end;
        getvectortags(vgroups,agroups);
        if(agroups.length<=1)then begin
          if(agroups.length==1)then begin
            RepSpec.f10 = agroups[0];
          end;
          threadremote.PrintEBSDocument("CEMarkForm","",RepSpec,ORr.SerNr,ORr.LangCode,farea);
          WriteAreaToFile(farea,fname,0);
        end else begin
          for(i=0;i<agroups.length;i=i+1)begin
            setareazerosize(farea);
            newfilename = left(fname,len(fname)-4) & agroups[i] & right(fname,4);
            RepSpec.f10 = agroups[i];
            threadremote.PrintEBSDocument("CEMarkForm","",RepSpec,ORr.SerNr,ORr.LangCode,farea);
            WriteAreaToFile(farea,newfilename,0);
          end;
        end;
      end;
    end else begin
      MessageBox(190000,"");
    end;
  end;

  return;
end;

global
procedure PrintPerformaceDeclaration()
begin
  record RcVc RepSpec;
  Integer wn;
  record IVVc IVr;

  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    if (ExternalDocumentEnabled("DeclarationOfPerformance")) then begin
      GetWindowRecord(wn,IVr);
      RepSpec.flags[0] = wn;
      OpenWindow("PerformaceDeclarationWClass",0,0,"","",RepSpec);
    end else begin
      MessageBox(190000,"");
    end;
  end;

  return;
end;

global
procedure PerformaceDeclarationWClassSubmit()
begin
  string 255 fname;
  area farea;
  record RcVc RepSpec,tRepSpec;
  Integer wn,num;
  record IVVc IVr;
  row IVVc IVrw;
  record INVc INr;
  integer i,rwcnt;
  vector boolean vgroups;
  array string 20 agroups;
  string 200 newfilename;

  num = StringToInt(PushButtonTag);
  wn = CurWindow;
  GetWindowRecord(wn,tRepSpec);
  if (GetWindowClass(tRepSpec.flags[0])=="IVDClass") then begin
    GetWindowRecord(tRepSpec.flags[0],IVr);
    fname = SaveFileDialog("","","pdf");
    if (nonblank(fname)) then begin
      rwcnt = matrowcnt(IVr);
      for(i=0;i<rwcnt;i=i+1)begin
        matrowget(IVr,i,IVrw);
        if(IVrw.stp==1 and nonblank(IVrw.ArtCode) and IVrw.ShowCEMark==1)then begin
          INr.Code = IVrw.ArtCode;
          if(readfirstmain(INr,1,true))then begin
            vgroups[INr.Group] = true;
          end;
        end;
      end;
      getvectortags(vgroups,agroups);
      if(agroups.length<=1)then begin
        if(agroups.length==1)then begin
          RepSpec.f10 = agroups[0];
        end;
        RepSpec.long1 = num;
        threadremote.PrintEBSDocument("DeclarationOfPerformance","",RepSpec,IVr.SerNr,IVr.LangCode,farea);
        WriteAreaToFile(farea,fname,0);
      end else begin
        for(i=0;i<agroups.length;i=i+1)begin
          setareazerosize(farea);
          newfilename = left(fname,len(fname)-4) & agroups[i] & right(fname,4);
          RepSpec.f10 = agroups[i];
          RepSpec.long1 = num;
          threadremote.PrintEBSDocument("DeclarationOfPerformance","",RepSpec,IVr.SerNr,IVr.LangCode,farea);
          WriteAreaToFile(farea,newfilename,0);
        end;
      end;
    end;
  end;

  return;
end;


global
procedure MMRoofCalcItemNewTranslationDsm()
begin
  record MMRoofCalcItemVc RCIr;
  record WebNGTranslateVc WebNGTranslater;
  row WebNGTranslateVc WebNGTranslaterw;
  Integer wn;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,RCIr);
    RecordNew(WebNGTranslater);
    WebNGTranslater.Code = RCIr.Code;
    WebNGTranslater.Comment = RCIr.Name;
    MatRowPut(WebNGTranslater,0,WebNGTranslaterw);
    WebNGTranslater.FileName = 5;
    wn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);    
  end;
  return;
end;

global
procedure MMRoofCalcItemOpenExtrasDsm()
begin
  record MMRoofCalcItemVc RCIr;
  record MMRoofCalcExtraVc RCEr;
  Integer wn;
  
  wn = CurWindow;
  if (WindowState(wn)==Rs_Normal) then begin
    GetWindowRecord(wn,RCIr);
    RCEr.Code = RCIr.Code;
    if (ReadFirstMain(RCEr,1,true)==false) then begin
      RecordNew(RCEr);
      RCEr.Code = RCIr.Code;
    end;
    wn = OpenWindow("MMRoofCalcExtraDClass",1,0,"","",RCEr);    
  end;

  return;
end;

global
function Boolean MMRoofCalcItemDClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record MMRoofCalcItemVc RCIr;
  
  GetWindowRecord(wn,RCIr);
  subsetname = RCIr.Code;
  MMRoofCalcItemDClassUpdateWindowSubset = true;
  RETURN;
END;

global
function Boolean MMRoofCalcItemDClassListDblClick(Integer wn)
begin
  Integer mwn;
  record WebNGTranslateVc WebNGTranslater;
  
  if (WindowState(wn)==0) then begin
    if (ReadMarkedRecord(wn,WebNGTranslater)) then begin
      mwn = OpenWindow("WebNGTranslateDClass",1,0,"","",WebNGTranslater);
    end;
  end;
  MMRoofCalcItemDClassListDblClick = true;
  return;
end;

global
procedure MMRoofCalcItemDClassButtonFlags(Integer wn,var Boolean duplOK,var Boolean newOK,var Boolean saveOK,var Boolean restOK)
begin
  saveOK = true;
  return;
end;

function Boolean MMRoofCalcExtraDClassItemEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record MMRoofCalcExtraVc RCEr;
  row MMRoofCalcExtraVc RCErw;
  record INVc INr;

  if (changedf) then begin
    GetWindowRecord(wn,RCEr);
    MatRowGet(RCEr,rownr,RCErw);
    INr.Code = RCErw.Item;
    if (ReadFirstMain(INr,1,true)) then begin
      RCErw.Spec = INr.Name;
      MatRowPut(RCEr,rownr,RCErw);
      PutWindowRecord(wn,RCEr);
    end;
  end;
  MMRoofCalcExtraDClassItemEFAfter = res;
  return;
end;

function Boolean MMRoofCalcExtraDClassItemSetEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record MMRoofCalcExtraVc RCEr;
  row MMRoofCalcExtraVc RCErw;
  record MMItemSetVc ISr;

  if (changedf) then begin
    GetWindowRecord(wn,RCEr);
    MatRowGet(RCEr,rownr,RCErw);
    ISr.ArtCode = RCErw.Item;
    if (ReadFirstMain(ISr,1,true)) then begin
      RCErw.Spec = ISr.Name;
      MatRowPut(RCEr,rownr,RCErw);
      PutWindowRecord(wn,RCEr);
    end;
  end;
  MMRoofCalcExtraDClassItemSetEFAfter = res;
  return;
end;

global
function Boolean MMRoofCalcExtraDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Item": res = MMRoofCalcExtraDClassItemEFAfter(wn,rownr,changed!=0);
    case "ItemSet": res = MMRoofCalcExtraDClassItemSetEFAfter(wn,rownr,changed!=0);
  end;
  MMRoofCalcExtraDClassAfterEditField = res;
  return;
end;

function Boolean MMRoofCalcItemDClassItemEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  Boolean res;
  record MMRoofCalcItemVc RCIr;
  row MMRoofCalcItemVc RCIrw;
  record MMItemSetVc MMItemSetr;
  row MMItemSetVc MMItemSetrw;
  record INVc INr;

  if (changedf) then begin
    GetWindowRecord(wn,RCIr);
    MatRowGet(RCIr,rownr,RCIrw);
    MMItemSetr.ArtCode = RCIrw.Item;
    if (ReadFirstMain(MMItemSetr,1,true)) then begin
      MatRowGet(MMItemSetr,0,MMItemSetrw);
      INr.Code = MMItemSetrw.Item;
      if (ReadFirstMain(INr,1,true)) then begin
        RCIrw.Spec = INr.Name;
        MatRowPut(RCIr,rownr,RCIrw);
        PutWindowRecord(wn,RCIr);
      end;
    end;
  end;
  MMRoofCalcItemDClassItemEFAfter = res;
  return;
end;

global
function Boolean MMRoofCalcItemDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "Item": res = MMRoofCalcItemDClassItemEFAfter(wn,rownr,changed!=0);
  end;
  MMRoofCalcItemDClassAfterEditField = res;
  return;
end;


global
function string 40 MMRoofCalcExtraDClassSpecPasteName(Integer wn,string defpsname)
begin
  string 255 psname;
  record MMRoofCalcExtraVc RCEr;
  row MMRoofCalcExtraVc RCErw;  
  integer rownr;
  string 40 fname;
  
  psname = defpsname;
  fname = WindowActiveField(wn);
  if (fname=="Item") then begin
    rownr = WindowActiveRow(wn);
    if (rownr>=0) then begin
      GetWindowRecord(wn,RCEr);
      MatRowGet(RCEr,rownr,RCErw);
      switch (RCErw.MeasureType) begin
        case 1:
          psname = "WebTextSClass";
      end;
    end;
    end;
  MMRoofCalcExtraDClassSpecPasteName = psname;
  return;  
end;
